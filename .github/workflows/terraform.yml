name: 'Update production'

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  TF_WORKSPACE: resume-prod
  DOTNET_VERSION: 6.0.x


permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./terraform

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./terraform

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"'
      run: terraform apply -auto-approve -input=false
      working-directory: ./terraform
  update:
    name: 'Update services'
    if: github.ref == 'refs/heads/"main"'
    runs-on: ubuntu-latest
    needs: terraform
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
    
    - name: Install function tools
      run: npm i -g azure-functions-core-tools@4 --unsafe-perm true

    - name: Publish Azure function
      run: ./scripts/publish-function.sh prod

    - name: Upload static site
      run: ./scripts/upload-static-page prod